구현은 까다롭지 않은나 조건을 생각해내기 매우 까다로웠던 dp문제이다.
3중dp로 구현하였고,  dp[현재자릿수][4개의type(0만포함or9만포함or 0,9둘다 포함or둘다포함x)][현재자릿수의 숫자] = 조건에 충족하는 계단수의 수로 표현하였다. 
type:(0: 둘다포함x, 1: 0만포함, 2: 9만포함, 3: 0,9 둘다 포함)이런식으로 말이다.
dp[n][t][c] 라 하면 구현방식은 c가 1~8일 때까지는 dp[n][t][c] = dp[n - 1][t][c + 1] + dp[n - 1][t][c - 1]이다.
중요한 것은 c가 0,9 일때이다. c가 0일때 type1일때 dp를 구하려면 dp[n][1][0] = dp[n - 1][1][1] + dp[n - 1][0][1] 이 된다. 이 경우에는 n - 1 일때 c가 1일때인 경우만 올 수 있고,
  자리 n에서 c가0이므로 0을 포함하게 되므로,  무조건 type1이 되기때문에 type0인 n-1일때의 dp를 더할 수 있게 된다. 
c가 9일 때도 마찬가지로 생각해 구현하면 된다.
결국 우리가 구하려는 것은 0과 9 둘다 포함하는 계단수 이므로, 이렇게 0과 9의 포함여부에 따른 타입을 나눈 dp를 구성해야 한다. 이런 사고방식이 다른 dp와 달랐고, 많이 고생한 덕에
이렇게 타입을 나누는 dp가 다음에 나왔을 때 좀더 대처가 수월 할 것 같다는 생각이 들었다.